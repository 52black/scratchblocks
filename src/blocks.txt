// The list of blocks, in scratchblocks format.
//
// Special values:
//  [list v] -- used to identify list dropdowns
//  [sqrt v] -- identifies math function, in the ([sqrt v] of ()) block
//

## Motion ##
move (10) steps
turn cw (15) degrees ## -turn-arrow
turn right (15) degrees ## -turn-arrow
turn ccw (15) degrees ## -turn-arrow
turn left (15) degrees ## -turn-arrow

point in direction (90 v)
point towards [ v]

go to x: (0) y: (0)
go to [mouse-pointer v]
glide (1) secs to x: (0) y: (0)

change x by (10)
set x to (0)
change y by (10)
set y to (0)

if on edge, bounce

set rotation style [left-right v]

(x position)
(y position)
(direction)



## Looks ##
say [Hello!] for (2) secs
say [Hello!]
think [Hmm...] for (2) secs
think [Hmm...]

show
hide

switch costume to [costume1 v]
next costume
switch backdrop to [backdrop1 v]

change [color v] effect by (25)
set [color v] effect to (0)
clear graphic effects

change size by (10)
set size to (100)%

go to front
go back (1) layers

(costume #)
(backdrop name)
(size)

## Stage-specific
## Looks ##
switch backdrop to [backdrop1 v] and wait
next backdrop

(backdrop #)



## Sound ##
play sound [pop v]
play sound [pop v] until done
stop all sounds

play drum (1 v) for (0.2) beats
rest for (0.2) beats

play note (60 v) for (0.5) beats
set instrument to (1 v)

change volume by (-10)
set volume to (100)%
(volume)

change tempo by (20)
set tempo to (60) bpm
(tempo)



## Pen ##
clear

stamp

pen down
pen up

set pen color to [#f0f]
change pen color by (10)
set pen color to (0)

change pen shade by (10)
set pen shade to (50)

change pen size by (1)
set pen size to (1)



## Variables ##
set [var v] to [0]
change [var v] by (1)
show variable [var v]
hide variable [var v]



## List ##
add [thing] to [list v]

delete (1 v) of [list v]
insert [thing] at (1 v) of [list v]
replace item (1 v) of [list v] with [thing]

(item (1 v) of [list v])
(length of [list v])
<[list v] contains [thing]>

show list [list v]
hide list [list v]



## Events ##
when gf clicked ## hat -green-flag
when green flag clicked ## hat -green-flag
when flag clicked ## hat -green-flag
when [space v] key pressed ## hat
when this sprite clicked ## hat
when backdrop switches to [backdrop1 v] ## hat

when [loudness v] > (10) ## hat

when I receive [message1 v] ## hat
broadcast [message1 v]
broadcast [message1 v] and wait



## Control ##
wait (1) secs

repeat (10) ## cstart
forever ## cstart cap
if <> then ## ifblock cstart
else ## celse
end ## cend
wait until <>
repeat until <> ## cstart

stop [all v] ## cap

when I start as a clone ## hat
create clone of [myself v]
delete this clone ## cap



## Sensing ##
<touching [ v]?>
<touching color [#f0f]?>
<color [#f0f] is touching?>
(distance to [ v])

ask [What's your name?] and wait
(answer)

<key [space v] pressed?>
<mouse down?>
(mouse x)
(mouse y)

(loudness)

(video [motion v] on [this sprite v])
turn video [on v]
set video transparency to (50)%

(timer)
reset timer

([x position v] of [Sprite1 v])

(current [minute v])
(days since 2000)
(username)
(user id)



## Operators ##
(() + ())
(() - ())
(() * ())
(() / ())

(pick random (1) to (10))

<[] < []>
<[] = []>
<[] > []>

<<> and <>>
<<> or <>>
<not <>>

(join [hello ] [world])
(letter (1) of [world])
(length of [world])

(() mod ())
(round ())

([sqrt v] of (9))



## Purple ##
when [button pressed v] ## hat
<sensor [button pressed v]?>
([slider v] sensor value)

turn motor on for (1) secs
turn motor on
turn motor off
set motor power (100)
set motor direction [this way v]

when distance < (20) ## hat
when tilt = (1) ## hat
(distance)
(tilt)



// Obsolete Scratch 1.4 blocks


## Looks ##
switch to costume [costume1 v]

switch to background [background1 v]
next background
(background #)



## Control ##
if <> ## cstart
forever if <> ## cstart cap
stop script ## cap
stop all ## cap



## Events ##
when clicked ## hat



## Sensing ##
<loud?>



## Purple ##
motor on
motor off
motor on for (1) seconds
motor power (100)
motor direction [this way v]



