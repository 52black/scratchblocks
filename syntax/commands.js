module.exports = [
  {
    spec: "move %1 steps",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "forward:",
  },
  {
    spec: "turn @turnRight %1 degrees",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "turnRight:",
  },
  {
    spec: "turn @turnLeft %1 degrees",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "turnLeft:",
  },
  {
    spec: "point in direction %1",
    inputs: ["%d.direction"],
    shape: "stack",
    category: "motion",
    selector: "heading:",
  },
  {
    spec: "point towards %1",
    inputs: ["%m.spriteOrMouse"],
    shape: "stack",
    category: "motion",
    selector: "pointTowards:",
  },
  {
    spec: "go to x:%1 y:%2",
    inputs: ["%n", "%n"],
    shape: "stack",
    category: "motion",
    selector: "gotoX:y:",
  },
  {
    spec: "go to %1",
    inputs: ["%m.location"],
    shape: "stack",
    category: "motion",
    selector: "gotoSpriteOrMouse:",
  },
  {
    spec: "glide %1 secs to x:%2 y:%3",
    inputs: ["%n", "%n", "%n"],
    shape: "stack",
    category: "motion",
    selector: "glideSecs:toX:y:elapsed:from:",
  },
  {
    spec: "glide %1 secs to %2",
    inputs: ["%n", "%m.location"],
    shape: "stack",
    category: "motion",
    selector: "sb3:motion_glidesecstoxy",
  },
  {
    spec: "change x by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "changeXposBy:",
  },
  {
    spec: "set x to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "xpos:",
  },
  {
    spec: "change y by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "changeYposBy:",
  },
  {
    spec: "set y to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
    selector: "ypos:",
  },
  {
    spec: "set rotation style %1",
    inputs: ["%m.rotationStyle"],
    shape: "stack",
    category: "motion",
    selector: "setRotationStyle",
  },
  {
    spec: "say %1 for %2 secs",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
    selector: "say:duration:elapsed:from:",
  },
  {
    spec: "say %1 for %2 seconds",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
    selector: "say:duration:elapsed:from:",
  },
  {
    spec: "say %1",
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
    selector: "say:",
  },
  {
    spec: "think %1 for %2 secs",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
    selector: "think:duration:elapsed:from:",
  },
  {
    spec: "think %1 for %2 seconds",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
    selector: "think:duration:elapsed:from:",
  },
  {
    spec: "think %1",
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
    selector: "think:",
  },
  {
    spec: "show",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "show",
  },
  {
    spec: "hide",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "hide",
  },
  {
    spec: "switch costume to %1",
    inputs: ["%m.costume"],
    shape: "stack",
    category: "looks",
    selector: "lookLike:",
  },
  {
    spec: "next costume",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "nextCostume",
  },
  {
    spec: "next backdrop",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "nextScene",
  },
  {
    spec: "switch backdrop to %1",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "looks",
    selector: "startScene",
  },
  {
    spec: "switch backdrop to %1 and wait",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "looks",
    selector: "startSceneAndWait",
  },
  {
    spec: "change %1 effect by %2",
    inputs: ["%m.effect", "%n"],
    shape: "stack",
    category: "looks",
    selector: "changeGraphicEffect:by:",
  },
  {
    spec: "set %1 effect to %2",
    inputs: ["%m.effect", "%n"],
    shape: "stack",
    category: "looks",
    selector: "setGraphicEffect:to:",
  },
  {
    spec: "clear graphic effects",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "filterReset",
  },
  {
    spec: "change size by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
    selector: "changeSizeBy:",
  },
  {
    spec: "set size to %1%",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
    selector: "setSizeTo:",
  },
  {
    spec: "go to front",
    inputs: [],
    shape: "stack",
    category: "looks",
    selector: "comeToFront",
  },
  {
    spec: "go to %1 layer",
    inputs: ["%m"],
    shape: "stack",
    category: "looks",
    selector: "sb3:looks_gotofrontback",
  },
  {
    spec: "go back %1 layers",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
    selector: "goBackByLayers:",
  },
  {
    spec: "go %1 %2 layers",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "looks",
    selector: "sb3:looks_goforwardbackwardlayers",
  },
  {
    spec: "play sound %1",
    inputs: ["%m.sound"],
    shape: "stack",
    category: "sound",
    selector: "playSound:",
  },
  {
    spec: "start sound %1",
    inputs: ["%m"],
    shape: "stack",
    category: "sound",
    selector: "playSound:",
  },
  {
    spec: "change %1 effect by %2",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_changeeffectby",
  },
  {
    spec: "set %1 effect to %2",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_seteffectto",
  },
  {
    spec: "clear sound effects",
    inputs: [],
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_cleareffects",
  },
  {
    spec: "play sound %1 until done",
    inputs: ["%m.sound"],
    shape: "stack",
    category: "sound",
    selector: "doPlaySoundAndWait",
  },
  {
    spec: "stop all sounds",
    inputs: [],
    shape: "stack",
    category: "sound",
    selector: "stopAllSounds",
  },
  {
    spec: "play drum %1 for %2 beats",
    inputs: ["%d.drum", "%n"],
    shape: "stack",
    category: "music",
    selector: "playDrum",
  },
  {
    spec: "rest for %1 beats",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
    selector: "rest:elapsed:from:",
  },
  {
    spec: "play note %1 for %2 beats",
    inputs: ["%d.note", "%n"],
    shape: "stack",
    category: "music",
    selector: "noteOn:duration:elapsed:from:",
  },
  {
    spec: "set instrument to %1",
    inputs: ["%d.instrument"],
    shape: "stack",
    category: "music",
    selector: "instrument:",
  },
  {
    spec: "change volume by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
    selector: "changeVolumeBy:",
  },
  {
    spec: "set volume to %1%",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
    selector: "setVolumeTo:",
  },
  {
    spec: "change tempo by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
    selector: "changeTempoBy:",
  },
  {
    spec: "set tempo to %1 bpm",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
    selector: "setTempoTo:",
  },
  {
    spec: "set tempo to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
    selector: "setTempoTo:",
  },
  {
    spec: "clear",
    inputs: [],
    shape: "stack",
    category: "pen",
    selector: "clearPenTrails",
  },
  {
    spec: "erase all",
    inputs: [],
    shape: "stack",
    category: "pen",
    selector: "clearPenTrails",
  },
  {
    spec: "stamp",
    inputs: [],
    shape: "stack",
    category: "pen",
    selector: "stampCostume",
  },
  {
    spec: "pen down",
    inputs: [],
    shape: "stack",
    category: "pen",
    selector: "putPenDown",
  },
  {
    spec: "pen up",
    inputs: [],
    shape: "stack",
    category: "pen",
    selector: "putPenUp",
  },
  {
    spec: "set pen color to %1",
    inputs: ["%c"],
    shape: "stack",
    category: "pen",
    selector: "penColor:",
  },
  {
    spec: "change pen color by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "changePenHueBy:",
  },
  {
    spec: "set pen %1 to %2",
    inputs: ["%m.color", "%c"],
    shape: "stack",
    category: "pen",
    selector: "",
  },
  {
    spec: "change pen %1 by %2",
    inputs: ["%m.color", "%n"],
    shape: "stack",
    category: "pen",
    selector: "",
  },
  {
    spec: "set pen color to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "setPenHueTo:",
  },
  {
    spec: "change pen shade by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "changePenShadeBy:",
  },
  {
    spec: "set pen shade to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "setPenShadeTo:",
  },
  {
    spec: "change pen size by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "changePenSizeBy:",
  },
  {
    spec: "set pen size to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
    selector: "penSize:",
  },
  {
    spec: "when @greenFlag clicked",
    inputs: [],
    shape: "hat",
    category: "events",
    selector: "whenGreenFlag",
  },
  {
    spec: "when %1 key pressed",
    inputs: ["%m.key"],
    shape: "hat",
    category: "events",
    selector: "whenKeyPressed",
  },
  {
    spec: "when this sprite clicked",
    inputs: [],
    shape: "hat",
    category: "events",
    selector: "whenClicked",
  },
  {
    spec: "when backdrop switches to %1",
    inputs: ["%m.backdrop"],
    shape: "hat",
    category: "events",
    selector: "whenSceneStarts",
  },
  {
    spec: "when %1 > %2",
    inputs: ["%m.triggerSensor", "%n"],
    shape: "hat",
    category: "events",
    selector: "whenSensorGreaterThan",
  },
  {
    spec: "when I receive %1",
    inputs: ["%m.broadcast"],
    shape: "hat",
    category: "events",
    selector: "whenIReceive",
  },
  {
    spec: "broadcast %1",
    inputs: ["%m.broadcast"],
    shape: "stack",
    category: "events",
    selector: "broadcast:",
  },
  {
    spec: "broadcast %1 and wait",
    inputs: ["%m.broadcast"],
    shape: "stack",
    category: "events",
    selector: "doBroadcastAndWait",
  },
  {
    spec: "wait %1 secs",
    inputs: ["%n"],
    shape: "stack",
    category: "control",
    selector: "wait:elapsed:from:",
  },
  {
    spec: "wait %1 seconds",
    inputs: ["%n"],
    shape: "stack",
    category: "control",
    selector: "wait:elapsed:from:",
  },
  {
    spec: "repeat %1",
    inputs: ["%n"],
    shape: "c-block",
    category: "control",
    selector: "doRepeat",
    hasLoopArrow: true,
  },
  {
    spec: "forever",
    inputs: [],
    shape: "c-block cap",
    category: "control",
    selector: "doForever",
    hasLoopArrow: true,
  },
  {
    spec: "if %1 then",
    inputs: ["%b"],
    shape: "c-block",
    category: "control",
    selector: "doIf",
  },
  {
    spec: "if %1 then",
    inputs: ["%b"],
    shape: "if-block",
    category: "control",
    selector: "doIfElse",
  },
  {
    spec: "wait until %1",
    inputs: ["%b"],
    shape: "stack",
    category: "control",
    selector: "doWaitUntil",
  },
  {
    spec: "repeat until %1",
    inputs: ["%b"],
    shape: "c-block",
    category: "control",
    selector: "doUntil",
    hasLoopArrow: true,
  },
  {
    spec: "stop %1",
    inputs: ["%m.stop"],
    shape: "cap",
    category: "control",
    selector: "stopScripts",
  },
  {
    spec: "when I start as a clone",
    inputs: [],
    shape: "hat",
    category: "control",
    selector: "whenCloned",
  },
  {
    spec: "create clone of %1",
    inputs: ["%m.spriteOnly"],
    shape: "stack",
    category: "control",
    selector: "createCloneOf",
  },
  {
    spec: "delete this clone",
    inputs: [],
    shape: "cap",
    category: "control",
    selector: "deleteClone",
  },
  {
    spec: "ask %1 and wait",
    inputs: ["%s"],
    shape: "stack",
    category: "sensing",
    selector: "doAsk",
  },
  {
    spec: "turn video %1",
    inputs: ["%m.videoState"],
    shape: "stack",
    category: "video",
    selector: "setVideoState",
  },
  {
    spec: "set video transparency to %1%",
    inputs: ["%n"],
    shape: "stack",
    category: "video",
    selector: "setVideoTransparency",
  },
  {
    spec: "when video motion > %1",
    inputs: ["%n"],
    shape: "hat",
    category: "video",
    selector: "",
  },
  {
    spec: "reset timer",
    inputs: [],
    shape: "stack",
    category: "sensing",
    selector: "timerReset",
  },
  {
    spec: "set %1 to %2",
    inputs: ["%m.var", "%s"],
    shape: "stack",
    category: "variables",
    selector: "setVar:to:",
  },
  {
    spec: "change %1 by %2",
    inputs: ["%m.var", "%n"],
    shape: "stack",
    category: "variables",
    selector: "changeVar:by:",
  },
  {
    spec: "show variable %1",
    inputs: ["%m.var"],
    shape: "stack",
    category: "variables",
    selector: "showVariable:",
  },
  {
    spec: "hide variable %1",
    inputs: ["%m.var"],
    shape: "stack",
    category: "variables",
    selector: "hideVariable:",
  },
  {
    spec: "add %1 to %2",
    inputs: ["%s", "%m.list"],
    shape: "stack",
    category: "list",
    selector: "append:toList:",
  },
  {
    spec: "delete %1 of %2",
    inputs: ["%d.listDeleteItem", "%m.list"],
    shape: "stack",
    category: "list",
    selector: "deleteLine:ofList:",
  },
  {
    spec: "delete all of %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "list",
    selector: "sb3:data_deletealloflist",
  },
  {
    spec: "if on edge, bounce",
    inputs: [],
    shape: "stack",
    category: "motion",
    selector: "bounceOffEdge",
  },
  {
    spec: "insert %1 at %2 of %3",
    inputs: ["%s", "%d.listItem", "%m.list"],
    shape: "stack",
    category: "list",
    selector: "insert:at:ofList:",
  },
  {
    spec: "replace item %1 of %2 with %3",
    inputs: ["%d.listItem", "%m.list", "%s"],
    shape: "stack",
    category: "list",
    selector: "setLine:ofList:to:",
  },
  {
    spec: "show list %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "list",
    selector: "showList:",
  },
  {
    spec: "hide list %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "list",
    selector: "hideList:",
  },
  {
    spec: "x position",
    inputs: [],
    shape: "reporter",
    category: "motion",
    selector: "xpos",
  },
  {
    spec: "y position",
    inputs: [],
    shape: "reporter",
    category: "motion",
    selector: "ypos",
  },
  {
    spec: "direction",
    inputs: [],
    shape: "reporter",
    category: "motion",
    selector: "heading",
  },
  {
    spec: "costume #",
    inputs: [],
    shape: "reporter",
    category: "looks",
    selector: "costumeIndex",
  },
  {
    spec: "costume %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "looks",
    selector: "LOOKS_COSTUMENUMBERNAME",
  },
  {
    spec: "size",
    inputs: [],
    shape: "reporter",
    category: "looks",
    selector: "scale",
  },
  {
    spec: "backdrop name",
    inputs: [],
    shape: "reporter",
    category: "looks",
    selector: "sceneName",
  },
  {
    spec: "backdrop %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "looks",
    selector: "sb3:LOOKS_BACKDROPNUMBERNAME",
  },
  {
    spec: "backdrop #",
    inputs: [],
    shape: "reporter",
    category: "looks",
    selector: "backgroundIndex",
  },
  {
    spec: "volume",
    inputs: [],
    shape: "reporter",
    category: "sound",
    selector: "volume",
  },
  {
    spec: "tempo",
    inputs: [],
    shape: "reporter",
    category: "music",
    selector: "tempo",
  },
  {
    spec: "touching %1?",
    inputs: ["%m.touching"],
    shape: "boolean",
    category: "sensing",
    selector: "touching:",
  },
  {
    spec: "touching color %1?",
    inputs: ["%c"],
    shape: "boolean",
    category: "sensing",
    selector: "touchingColor:",
  },
  {
    spec: "color %1 is touching %2?",
    inputs: ["%c", "%c"],
    shape: "boolean",
    category: "sensing",
    selector: "color:sees:",
  },
  {
    spec: "distance to %1",
    inputs: ["%m.spriteOrMouse"],
    shape: "reporter",
    category: "sensing",
    selector: "distanceTo:",
  },
  {
    spec: "answer",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "answer",
  },
  {
    spec: "key %1 pressed?",
    inputs: ["%m.key"],
    shape: "boolean",
    category: "sensing",
    selector: "keyPressed:",
  },
  {
    spec: "mouse down?",
    inputs: [],
    shape: "boolean",
    category: "sensing",
    selector: "mousePressed",
  },
  {
    spec: "mouse x",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "mouseX",
  },
  {
    spec: "mouse y",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "mouseY",
  },
  {
    spec: "set drag mode %1",
    inputs: ["%m"],
    shape: "stack",
    category: "sensing",
    selector: "sb3:SENSING_SETDRAGMODE",
  },
  {
    spec: "loudness",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "soundLevel",
  },
  {
    spec: "video %1 on %2",
    inputs: ["%m.videoMotionType", "%m.stageOrThis"],
    shape: "reporter",
    category: "video",
    selector: "senseVideoMotion",
  },
  {
    spec: "timer",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "timer",
  },
  {
    spec: "%1 of %2",
    inputs: ["%m.attribute", "%m.spriteOrStage"],
    shape: "reporter",
    category: "sensing",
    selector: "getAttribute:of:",
  },
  {
    spec: "current %1",
    inputs: ["%m.timeAndDate"],
    shape: "reporter",
    category: "sensing",
    selector: "timeAndDate",
  },
  {
    spec: "days since 2000",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "timestamp",
  },
  {
    spec: "username",
    inputs: [],
    shape: "reporter",
    category: "sensing",
    selector: "getUserName",
  },
  {
    spec: "%1 + %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "+",
  },
  {
    spec: "%1 - %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "-",
  },
  {
    spec: "%1 * %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "*",
  },
  {
    spec: "%1 / %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "/",
  },
  {
    spec: "pick random %1 to %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "randomFrom:to:",
  },
  {
    spec: "%1 < %2",
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
    selector: "<",
  },
  {
    spec: "%1 = %2",
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
    selector: "=",
  },
  {
    spec: "%1 > %2",
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
    selector: ">",
  },
  {
    spec: "%1 and %2",
    inputs: ["%b", "%b"],
    shape: "boolean",
    category: "operators",
    selector: "&",
  },
  {
    spec: "%1 or %2",
    inputs: ["%b", "%b"],
    shape: "boolean",
    category: "operators",
    selector: "|",
  },
  {
    spec: "not %1",
    inputs: ["%b"],
    shape: "boolean",
    category: "operators",
    selector: "not",
  },
  {
    spec: "join %1 %2",
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "operators",
    selector: "concatenate:with:",
  },
  {
    spec: "letter %1 of %2",
    inputs: ["%n", "%s"],
    shape: "reporter",
    category: "operators",
    selector: "letter:of:",
  },
  {
    spec: "length of %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "operators",
    selector: "stringLength:",
  },
  {
    spec: "%1 mod %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "%",
  },
  {
    spec: "round %1",
    inputs: ["%n"],
    shape: "reporter",
    category: "operators",
    selector: "rounded",
  },
  {
    spec: "%1 of %2",
    inputs: ["%m.mathOp", "%n"],
    shape: "reporter",
    category: "operators",
    selector: "computeFunction:of:",
  },
  {
    spec: "%1 contains %2?",
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
    selector: "sb3:operator_contains",
  },
  {
    spec: "item %1 of %2",
    inputs: ["%d.listItem", "%m.list"],
    shape: "reporter",
    category: "list",
    selector: "getLine:ofList:",
  },
  {
    spec: "item # of %1 in %2",
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "list",
    selector: "sb3:DATA_ITEMNUMOFLIST",
  },
  {
    spec: "length of %1",
    inputs: ["%m.list"],
    shape: "reporter",
    category: "list",
    selector: "lineCountOfList:",
  },
  {
    spec: "%1 contains %2?",
    inputs: ["%m.list", "%s"],
    shape: "boolean",
    category: "list",
    selector: "list:contains:",
  },
  {
    spec: "when %1",
    inputs: ["%m.booleanSensor"],
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "when %1 %2 %3",
    inputs: ["%m.sensor", "%m.lessMore", "%n"],
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "sensor %1?",
    inputs: ["%m.booleanSensor"],
    shape: "boolean",
    category: "extension",
    selector: "",
  },
  {
    spec: "%1 sensor value",
    inputs: ["%m.sensor"],
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on for %2 secs",
    inputs: ["%m.motor", "%n"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on",
    inputs: ["%m.motor"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 off",
    inputs: ["%m.motor"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set %1 power to %2",
    inputs: ["%m.motor", "%n"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set %12 direction to %2",
    inputs: ["%m.motor2", "%m.motorDirection"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "when distance %1 %2",
    inputs: ["%m.lessMore", "%n"],
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "when tilt %1 %2",
    inputs: ["%m.eNe", "%n"],
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "distance",
    inputs: [],
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "tilt",
    inputs: [],
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on for %2 seconds",
    inputs: ["%m.motor", "%n"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set light color to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "play note %1 for %2 seconds",
    inputs: ["%n", "%n"],
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "when tilted",
    inputs: [],
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "tilt %1",
    inputs: ["%m.xxx"],
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "else",
    inputs: [],
    shape: "celse",
    category: "control",
    selector: "",
  },
  {
    spec: "end",
    inputs: [],
    shape: "cend",
    category: "control",
    selector: "",
  },
  {
    spec: ". . .",
    inputs: [],
    shape: "stack",
    category: "grey",
    selector: "",
  },
  {
    spec: "%1 @addInput",
    inputs: ["%n"],
    shape: "ring",
    category: "grey",
    selector: "",
  },
  {
    spec: "user id",
    inputs: [],
    shape: "reporter",
    category: "obsolete",
    selector: "",
  },
  {
    spec: "if %1",
    inputs: ["%b"],
    shape: "c-block",
    category: "obsolete",
    selector: "doIf",
  },
  {
    spec: "if %1",
    inputs: ["%b"],
    shape: "if-block",
    category: "obsolete",
    selector: "doIfElse",
  },
  {
    spec: "forever if %1",
    inputs: ["%b"],
    shape: "c-block cap",
    category: "obsolete",
    selector: "doForeverIf",
  },
  {
    spec: "stop script",
    inputs: [],
    shape: "cap",
    category: "obsolete",
    selector: "doReturn",
  },
  {
    spec: "stop all",
    inputs: [],
    shape: "cap",
    category: "obsolete",
    selector: "stopAll",
  },
  {
    spec: "switch to costume %1",
    inputs: ["%m.costume"],
    shape: "stack",
    category: "obsolete",
    selector: "lookLike:",
  },
  {
    spec: "next background",
    inputs: [],
    shape: "stack",
    category: "obsolete",
    selector: "nextScene",
  },
  {
    spec: "switch to background %1",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "obsolete",
    selector: "startScene",
  },
  {
    spec: "background #",
    inputs: [],
    shape: "reporter",
    category: "obsolete",
    selector: "backgroundIndex",
  },
  {
    spec: "loud?",
    inputs: [],
    shape: "boolean",
    category: "obsolete",
    selector: "isLoud",
  },
]
