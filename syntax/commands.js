module.exports = [
  {
    spec: "move %1 steps",
    parts: ["move", "%n", "steps"],
    inputs: ["%n"],
    hash: "move _ steps",
    shape: "stack",
    category: "motion",
    selector: "forward:",
  },
  {
    spec: "turn @turnRight %2 degrees",
    parts: ["turn", "@turnRight", "%n", "degrees"],
    inputs: ["%n"],
    hash: "turn @turnright _ degrees",
    shape: "stack",
    category: "motion",
    selector: "turnRight:",
  },
  {
    spec: "turn @turnLeft %2 degrees",
    parts: ["turn", "@turnLeft", "%n", "degrees"],
    inputs: ["%n"],
    hash: "turn @turnleft _ degrees",
    shape: "stack",
    category: "motion",
    selector: "turnLeft:",
  },
  {
    spec: "point in direction %1",
    parts: ["point", "in", "direction", "%d.direction"],
    inputs: ["%d.direction"],
    hash: "point in direction _",
    shape: "stack",
    category: "motion",
    selector: "heading:",
  },
  {
    spec: "point towards %1",
    parts: ["point", "towards", "%m.spriteOrMouse"],
    inputs: ["%m.spriteOrMouse"],
    hash: "point towards _",
    shape: "stack",
    category: "motion",
    selector: "pointTowards:",
  },
  {
    spec: "go to x:%1 y:%2",
    parts: ["go", "to", "x:", "%n", "y:", "%n"],
    inputs: ["%n", "%n"],
    hash: "go to x _ y _",
    shape: "stack",
    category: "motion",
    selector: "gotoX:y:",
  },
  {
    spec: "go to %1",
    parts: ["go", "to", "%m.location"],
    inputs: ["%m.location"],
    hash: "go to _",
    shape: "stack",
    category: "motion",
    selector: "gotoSpriteOrMouse:",
  },
  {
    spec: "glide %1 secs to x:%2 y:%3",
    parts: ["glide", "%n", "secs", "to", "x:", "%n", "y:", "%n"],
    inputs: ["%n", "%n", "%n"],
    hash: "glide _ secs to x _ y _",
    shape: "stack",
    category: "motion",
    selector: "glideSecs:toX:y:elapsed:from:",
  },
  {
    spec: "glide %1 secs to %2",
    parts: ["glide", "%n", "secs", "to", "%m.location"],
    inputs: ["%n", "%m.location"],
    hash: "glide _ secs to _",
    shape: "stack",
    category: "motion",
    selector: "sb3:motion_glidesecstoxy",
  },
  {
    spec: "change x by %1",
    parts: ["change", "x", "by", "%n"],
    inputs: ["%n"],
    hash: "change x by _",
    shape: "stack",
    category: "motion",
    selector: "changeXposBy:",
  },
  {
    spec: "set x to %1",
    parts: ["set", "x", "to", "%n"],
    inputs: ["%n"],
    hash: "set x to _",
    shape: "stack",
    category: "motion",
    selector: "xpos:",
  },
  {
    spec: "change y by %1",
    parts: ["change", "y", "by", "%n"],
    inputs: ["%n"],
    hash: "change y by _",
    shape: "stack",
    category: "motion",
    selector: "changeYposBy:",
  },
  {
    spec: "set y to %1",
    parts: ["set", "y", "to", "%n"],
    inputs: ["%n"],
    hash: "set y to _",
    shape: "stack",
    category: "motion",
    selector: "ypos:",
  },
  {
    spec: "set rotation style %1",
    parts: ["set", "rotation", "style", "%m.rotationStyle"],
    inputs: ["%m.rotationStyle"],
    hash: "set rotation style _",
    shape: "stack",
    category: "motion",
    selector: "setRotationStyle",
  },
  {
    spec: "say %1 for %2 secs",
    parts: ["say", "%s", "for", "%n", "secs"],
    inputs: ["%s", "%n"],
    hash: "say _ for _ secs",
    shape: "stack",
    category: "looks",
    selector: "say:duration:elapsed:from:",
  },
  {
    spec: "say %1 for %2 seconds",
    parts: ["say", "%s", "for", "%n", "seconds"],
    inputs: ["%s", "%n"],
    hash: "say _ for _ seconds",
    shape: "stack",
    category: "looks",
    selector: "say:duration:elapsed:from:",
  },
  {
    spec: "say %1",
    parts: ["say", "%s"],
    inputs: ["%s"],
    hash: "say _",
    shape: "stack",
    category: "looks",
    selector: "say:",
  },
  {
    spec: "think %1 for %2 secs",
    parts: ["think", "%s", "for", "%n", "secs"],
    inputs: ["%s", "%n"],
    hash: "think _ for _ secs",
    shape: "stack",
    category: "looks",
    selector: "think:duration:elapsed:from:",
  },
  {
    spec: "think %1 for %2 seconds",
    parts: ["think", "%s", "for", "%n", "seconds"],
    inputs: ["%s", "%n"],
    hash: "think _ for _ seconds",
    shape: "stack",
    category: "looks",
    selector: "think:duration:elapsed:from:",
  },
  {
    spec: "think %1",
    parts: ["think", "%s"],
    inputs: ["%s"],
    hash: "think _",
    shape: "stack",
    category: "looks",
    selector: "think:",
  },
  {
    spec: "show",
    parts: ["show"],
    inputs: [],
    hash: "show",
    shape: "stack",
    category: "looks",
    selector: "show",
  },
  {
    spec: "hide",
    parts: ["hide"],
    inputs: [],
    hash: "hide",
    shape: "stack",
    category: "looks",
    selector: "hide",
  },
  {
    spec: "switch costume to %1",
    parts: ["switch", "costume", "to", "%m.costume"],
    inputs: ["%m.costume"],
    hash: "switch costume to _",
    shape: "stack",
    category: "looks",
    selector: "lookLike:",
  },
  {
    spec: "next costume",
    parts: ["next", "costume"],
    inputs: [],
    hash: "next costume",
    shape: "stack",
    category: "looks",
    selector: "nextCostume",
  },
  {
    spec: "next backdrop",
    parts: ["next", "backdrop"],
    inputs: [],
    hash: "next backdrop",
    shape: "stack",
    category: "looks",
    selector: "nextScene",
  },
  {
    spec: "switch backdrop to %1",
    parts: ["switch", "backdrop", "to", "%m.backdrop"],
    inputs: ["%m.backdrop"],
    hash: "switch backdrop to _",
    shape: "stack",
    category: "looks",
    selector: "startScene",
  },
  {
    spec: "switch backdrop to %1 and wait",
    parts: ["switch", "backdrop", "to", "%m.backdrop", "and", "wait"],
    inputs: ["%m.backdrop"],
    hash: "switch backdrop to _ and wait",
    shape: "stack",
    category: "looks",
    selector: "startSceneAndWait",
  },
  {
    spec: "change %1 effect by %2",
    parts: ["change", "%m.effect", "effect", "by", "%n"],
    inputs: ["%m.effect", "%n"],
    hash: "change _ effect by _",
    shape: "stack",
    category: "looks",
    selector: "changeGraphicEffect:by:",
  },
  {
    spec: "set %1 effect to %2",
    parts: ["set", "%m.effect", "effect", "to", "%n"],
    inputs: ["%m.effect", "%n"],
    hash: "set _ effect to _",
    shape: "stack",
    category: "looks",
    selector: "setGraphicEffect:to:",
  },
  {
    spec: "clear graphic effects",
    parts: ["clear", "graphic", "effects"],
    inputs: [],
    hash: "clear graphic effects",
    shape: "stack",
    category: "looks",
    selector: "filterReset",
  },
  {
    spec: "change size by %1",
    parts: ["change", "size", "by", "%n"],
    inputs: ["%n"],
    hash: "change size by _",
    shape: "stack",
    category: "looks",
    selector: "changeSizeBy:",
  },
  {
    spec: "set size to %1%",
    parts: ["set", "size", "to", "%n", "%"],
    inputs: ["%n"],
    hash: "set size to _",
    shape: "stack",
    category: "looks",
    selector: "setSizeTo:",
  },
  {
    spec: "go to front",
    parts: ["go", "to", "front"],
    inputs: [],
    hash: "go to front",
    shape: "stack",
    category: "looks",
    selector: "comeToFront",
  },
  {
    spec: "go to %1 layer",
    parts: ["go", "to", "%m", "layer"],
    inputs: ["%m"],
    hash: "go to _ layer",
    shape: "stack",
    category: "looks",
    selector: "sb3:looks_gotofrontback",
  },
  {
    spec: "go back %1 layers",
    parts: ["go", "back", "%n", "layers"],
    inputs: ["%n"],
    hash: "go back _ layers",
    shape: "stack",
    category: "looks",
    selector: "goBackByLayers:",
  },
  {
    spec: "go %1 %2 layers",
    parts: ["go", "%m", "%n", "layers"],
    inputs: ["%m", "%n"],
    hash: "go _ _ layers",
    shape: "stack",
    category: "looks",
    selector: "sb3:looks_goforwardbackwardlayers",
  },
  {
    spec: "play sound %1",
    parts: ["play", "sound", "%m.sound"],
    inputs: ["%m.sound"],
    hash: "play sound _",
    shape: "stack",
    category: "sound",
    selector: "playSound:",
  },
  {
    spec: "start sound %1",
    parts: ["start", "sound", "%m"],
    inputs: ["%m"],
    hash: "start sound _",
    shape: "stack",
    category: "sound",
    selector: "playSound:",
  },
  {
    spec: "change %1 effect by %2",
    parts: ["change", "%m", "effect", "by", "%n"],
    inputs: ["%m", "%n"],
    hash: "change _ effect by _",
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_changeeffectby",
  },
  {
    spec: "set %1 effect to %2",
    parts: ["set", "%m", "effect", "to", "%n"],
    inputs: ["%m", "%n"],
    hash: "set _ effect to _",
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_seteffectto",
  },
  {
    spec: "clear sound effects",
    parts: ["clear", "sound", "effects"],
    inputs: [],
    hash: "clear sound effects",
    shape: "stack",
    category: "sound",
    selector: "sb3:sound_cleareffects",
  },
  {
    spec: "play sound %1 until done",
    parts: ["play", "sound", "%m.sound", "until", "done"],
    inputs: ["%m.sound"],
    hash: "play sound _ until done",
    shape: "stack",
    category: "sound",
    selector: "doPlaySoundAndWait",
  },
  {
    spec: "stop all sounds",
    parts: ["stop", "all", "sounds"],
    inputs: [],
    hash: "stop all sounds",
    shape: "stack",
    category: "sound",
    selector: "stopAllSounds",
  },
  {
    spec: "play drum %1 for %2 beats",
    parts: ["play", "drum", "%d.drum", "for", "%n", "beats"],
    inputs: ["%d.drum", "%n"],
    hash: "play drum _ for _ beats",
    shape: "stack",
    category: "music",
    selector: "playDrum",
  },
  {
    spec: "rest for %1 beats",
    parts: ["rest", "for", "%n", "beats"],
    inputs: ["%n"],
    hash: "rest for _ beats",
    shape: "stack",
    category: "music",
    selector: "rest:elapsed:from:",
  },
  {
    spec: "play note %1 for %2 beats",
    parts: ["play", "note", "%d.note", "for", "%n", "beats"],
    inputs: ["%d.note", "%n"],
    hash: "play note _ for _ beats",
    shape: "stack",
    category: "music",
    selector: "noteOn:duration:elapsed:from:",
  },
  {
    spec: "set instrument to %1",
    parts: ["set", "instrument", "to", "%d.instrument"],
    inputs: ["%d.instrument"],
    hash: "set instrument to _",
    shape: "stack",
    category: "music",
    selector: "instrument:",
  },
  {
    spec: "change volume by %1",
    parts: ["change", "volume", "by", "%n"],
    inputs: ["%n"],
    hash: "change volume by _",
    shape: "stack",
    category: "sound",
    selector: "changeVolumeBy:",
  },
  {
    spec: "set volume to %1%",
    parts: ["set", "volume", "to", "%n", "%"],
    inputs: ["%n"],
    hash: "set volume to _",
    shape: "stack",
    category: "sound",
    selector: "setVolumeTo:",
  },
  {
    spec: "change tempo by %1",
    parts: ["change", "tempo", "by", "%n"],
    inputs: ["%n"],
    hash: "change tempo by _",
    shape: "stack",
    category: "music",
    selector: "changeTempoBy:",
  },
  {
    spec: "set tempo to %1 bpm",
    parts: ["set", "tempo", "to", "%n", "bpm"],
    inputs: ["%n"],
    hash: "set tempo to _ bpm",
    shape: "stack",
    category: "sound",
    selector: "setTempoTo:",
  },
  {
    spec: "set tempo to %1",
    parts: ["set", "tempo", "to", "%n"],
    inputs: ["%n"],
    hash: "set tempo to _",
    shape: "stack",
    category: "music",
    selector: "setTempoTo:",
  },
  {
    spec: "clear",
    parts: ["clear"],
    inputs: [],
    hash: "clear",
    shape: "stack",
    category: "pen",
    selector: "clearPenTrails",
  },
  {
    spec: "erase all",
    parts: ["erase", "all"],
    inputs: [],
    hash: "erase all",
    shape: "stack",
    category: "pen",
    selector: "clearPenTrails",
  },
  {
    spec: "stamp",
    parts: ["stamp"],
    inputs: [],
    hash: "stamp",
    shape: "stack",
    category: "pen",
    selector: "stampCostume",
  },
  {
    spec: "pen down",
    parts: ["pen", "down"],
    inputs: [],
    hash: "pen down",
    shape: "stack",
    category: "pen",
    selector: "putPenDown",
  },
  {
    spec: "pen up",
    parts: ["pen", "up"],
    inputs: [],
    hash: "pen up",
    shape: "stack",
    category: "pen",
    selector: "putPenUp",
  },
  {
    spec: "set pen color to %1",
    parts: ["set", "pen", "color", "to", "%c"],
    inputs: ["%c"],
    hash: "set pen color to _",
    shape: "stack",
    category: "pen",
    selector: "penColor:",
  },
  {
    spec: "change pen color by %1",
    parts: ["change", "pen", "color", "by", "%n"],
    inputs: ["%n"],
    hash: "change pen color by _",
    shape: "stack",
    category: "pen",
    selector: "changePenHueBy:",
  },
  {
    spec: "set pen %1 to %2",
    parts: ["set", "pen", "%m.color", "to", "%c"],
    inputs: ["%m.color", "%c"],
    hash: "set pen _ to _",
    shape: "stack",
    category: "pen",
    selector: "",
  },
  {
    spec: "change pen %1 by %2",
    parts: ["change", "pen", "%m.color", "by", "%n"],
    inputs: ["%m.color", "%n"],
    hash: "change pen _ by _",
    shape: "stack",
    category: "pen",
    selector: "",
  },
  {
    spec: "set pen color to %1",
    parts: ["set", "pen", "color", "to", "%n"],
    inputs: ["%n"],
    hash: "set pen color to _",
    shape: "stack",
    category: "pen",
    selector: "setPenHueTo:",
  },
  {
    spec: "change pen shade by %1",
    parts: ["change", "pen", "shade", "by", "%n"],
    inputs: ["%n"],
    hash: "change pen shade by _",
    shape: "stack",
    category: "pen",
    selector: "changePenShadeBy:",
  },
  {
    spec: "set pen shade to %1",
    parts: ["set", "pen", "shade", "to", "%n"],
    inputs: ["%n"],
    hash: "set pen shade to _",
    shape: "stack",
    category: "pen",
    selector: "setPenShadeTo:",
  },
  {
    spec: "change pen size by %1",
    parts: ["change", "pen", "size", "by", "%n"],
    inputs: ["%n"],
    hash: "change pen size by _",
    shape: "stack",
    category: "pen",
    selector: "changePenSizeBy:",
  },
  {
    spec: "set pen size to %1",
    parts: ["set", "pen", "size", "to", "%n"],
    inputs: ["%n"],
    hash: "set pen size to _",
    shape: "stack",
    category: "pen",
    selector: "penSize:",
  },
  {
    spec: "when @greenFlag clicked",
    parts: ["when", "@greenFlag", "clicked"],
    inputs: [],
    hash: "when @greenflag clicked",
    shape: "hat",
    category: "events",
    selector: "whenGreenFlag",
  },
  {
    spec: "when %1 key pressed",
    parts: ["when", "%m.key", "key", "pressed"],
    inputs: ["%m.key"],
    hash: "when _ key pressed",
    shape: "hat",
    category: "events",
    selector: "whenKeyPressed",
  },
  {
    spec: "when this sprite clicked",
    parts: ["when", "this", "sprite", "clicked"],
    inputs: [],
    hash: "when this sprite clicked",
    shape: "hat",
    category: "events",
    selector: "whenClicked",
  },
  {
    spec: "when backdrop switches to %1",
    parts: ["when", "backdrop", "switches", "to", "%m.backdrop"],
    inputs: ["%m.backdrop"],
    hash: "when backdrop switches to _",
    shape: "hat",
    category: "events",
    selector: "whenSceneStarts",
  },
  {
    spec: "when %1 > %2",
    parts: ["when", "%m.triggerSensor", ">", "%n"],
    inputs: ["%m.triggerSensor", "%n"],
    hash: "when _ > _",
    shape: "hat",
    category: "events",
    selector: "whenSensorGreaterThan",
  },
  {
    spec: "when I receive %1",
    parts: ["when", "I", "receive", "%m.broadcast"],
    inputs: ["%m.broadcast"],
    hash: "when i receive _",
    shape: "hat",
    category: "events",
    selector: "whenIReceive",
  },
  {
    spec: "broadcast %1",
    parts: ["broadcast", "%m.broadcast"],
    inputs: ["%m.broadcast"],
    hash: "broadcast _",
    shape: "stack",
    category: "events",
    selector: "broadcast:",
  },
  {
    spec: "broadcast %1 and wait",
    parts: ["broadcast", "%m.broadcast", "and", "wait"],
    inputs: ["%m.broadcast"],
    hash: "broadcast _ and wait",
    shape: "stack",
    category: "events",
    selector: "doBroadcastAndWait",
  },
  {
    spec: "wait %1 secs",
    parts: ["wait", "%n", "secs"],
    inputs: ["%n"],
    hash: "wait _ secs",
    shape: "stack",
    category: "control",
    selector: "wait:elapsed:from:",
  },
  {
    spec: "wait %1 seconds",
    parts: ["wait", "%n", "seconds"],
    inputs: ["%n"],
    hash: "wait _ seconds",
    shape: "stack",
    category: "control",
    selector: "wait:elapsed:from:",
  },
  {
    spec: "repeat %1",
    parts: ["repeat", "%n"],
    inputs: ["%n"],
    hash: "repeat _",
    shape: "c-block",
    category: "control",
    selector: "doRepeat",
    hasLoopArrow: true,
  },
  {
    spec: "forever",
    parts: ["forever"],
    inputs: [],
    hash: "forever",
    shape: "c-block cap",
    category: "control",
    selector: "doForever",
    hasLoopArrow: true,
  },
  {
    spec: "if %1 then",
    parts: ["if", "%b", "then"],
    inputs: ["%b"],
    hash: "if _ then",
    shape: "c-block",
    category: "control",
    selector: "doIf",
  },
  {
    spec: "if %1 then",
    parts: ["if", "%b", "then"],
    inputs: ["%b"],
    hash: "if _ then",
    shape: "if-block",
    category: "control",
    selector: "doIfElse",
  },
  {
    spec: "wait until %1",
    parts: ["wait", "until", "%b"],
    inputs: ["%b"],
    hash: "wait until _",
    shape: "stack",
    category: "control",
    selector: "doWaitUntil",
  },
  {
    spec: "repeat until %1",
    parts: ["repeat", "until", "%b"],
    inputs: ["%b"],
    hash: "repeat until _",
    shape: "c-block",
    category: "control",
    selector: "doUntil",
    hasLoopArrow: true,
  },
  {
    spec: "stop %1",
    parts: ["stop", "%m.stop"],
    inputs: ["%m.stop"],
    hash: "stop _",
    shape: "cap",
    category: "control",
    selector: "stopScripts",
  },
  {
    spec: "when I start as a clone",
    parts: ["when", "I", "start", "as", "a", "clone"],
    inputs: [],
    hash: "when i start as a clone",
    shape: "hat",
    category: "control",
    selector: "whenCloned",
  },
  {
    spec: "create clone of %1",
    parts: ["create", "clone", "of", "%m.spriteOnly"],
    inputs: ["%m.spriteOnly"],
    hash: "create clone of _",
    shape: "stack",
    category: "control",
    selector: "createCloneOf",
  },
  {
    spec: "delete this clone",
    parts: ["delete", "this", "clone"],
    inputs: [],
    hash: "delete this clone",
    shape: "cap",
    category: "control",
    selector: "deleteClone",
  },
  {
    spec: "ask %1 and wait",
    parts: ["ask", "%s", "and", "wait"],
    inputs: ["%s"],
    hash: "ask _ and wait",
    shape: "stack",
    category: "sensing",
    selector: "doAsk",
  },
  {
    spec: "turn video %1",
    parts: ["turn", "video", "%m.videoState"],
    inputs: ["%m.videoState"],
    hash: "turn video _",
    shape: "stack",
    category: "video",
    selector: "setVideoState",
  },
  {
    spec: "set video transparency to %1%",
    parts: ["set", "video", "transparency", "to", "%n", "%"],
    inputs: ["%n"],
    hash: "set video transparency to _",
    shape: "stack",
    category: "video",
    selector: "setVideoTransparency",
  },
  {
    spec: "when video motion > %1",
    parts: ["when", "video", "motion", ">", "%n"],
    inputs: ["%n"],
    hash: "when video motion > _",
    shape: "hat",
    category: "video",
    selector: "",
  },
  {
    spec: "reset timer",
    parts: ["reset", "timer"],
    inputs: [],
    hash: "reset timer",
    shape: "stack",
    category: "sensing",
    selector: "timerReset",
  },
  {
    spec: "set %1 to %2",
    parts: ["set", "%m.var", "to", "%s"],
    inputs: ["%m.var", "%s"],
    hash: "set _ to _",
    shape: "stack",
    category: "variables",
    selector: "setVar:to:",
  },
  {
    spec: "change %1 by %2",
    parts: ["change", "%m.var", "by", "%n"],
    inputs: ["%m.var", "%n"],
    hash: "change _ by _",
    shape: "stack",
    category: "variables",
    selector: "changeVar:by:",
  },
  {
    spec: "show variable %1",
    parts: ["show", "variable", "%m.var"],
    inputs: ["%m.var"],
    hash: "show variable _",
    shape: "stack",
    category: "variables",
    selector: "showVariable:",
  },
  {
    spec: "hide variable %1",
    parts: ["hide", "variable", "%m.var"],
    inputs: ["%m.var"],
    hash: "hide variable _",
    shape: "stack",
    category: "variables",
    selector: "hideVariable:",
  },
  {
    spec: "add %1 to %2",
    parts: ["add", "%s", "to", "%m.list"],
    inputs: ["%s", "%m.list"],
    hash: "add _ to _",
    shape: "stack",
    category: "list",
    selector: "append:toList:",
  },
  {
    spec: "delete %1 of %2",
    parts: ["delete", "%d.listDeleteItem", "of", "%m.list"],
    inputs: ["%d.listDeleteItem", "%m.list"],
    hash: "delete _ of _",
    shape: "stack",
    category: "list",
    selector: "deleteLine:ofList:",
  },
  {
    spec: "delete all of %1",
    parts: ["delete", "all", "of", "%m.list"],
    inputs: ["%m.list"],
    hash: "delete all of _",
    shape: "stack",
    category: "list",
    selector: "sb3:data_deletealloflist",
  },
  {
    spec: "if on edge, bounce",
    parts: ["if", "on", "edge,", "bounce"],
    inputs: [],
    hash: "if on edge bounce",
    shape: "stack",
    category: "motion",
    selector: "bounceOffEdge",
  },
  {
    spec: "insert %1 at %2 of %3",
    parts: ["insert", "%s", "at", "%d.listItem", "of", "%m.list"],
    inputs: ["%s", "%d.listItem", "%m.list"],
    hash: "insert _ at _ of _",
    shape: "stack",
    category: "list",
    selector: "insert:at:ofList:",
  },
  {
    spec: "replace item %1 of %2 with %3",
    parts: ["replace", "item", "%d.listItem", "of", "%m.list", "with", "%s"],
    inputs: ["%d.listItem", "%m.list", "%s"],
    hash: "replace item _ of _ with _",
    shape: "stack",
    category: "list",
    selector: "setLine:ofList:to:",
  },
  {
    spec: "show list %1",
    parts: ["show", "list", "%m.list"],
    inputs: ["%m.list"],
    hash: "show list _",
    shape: "stack",
    category: "list",
    selector: "showList:",
  },
  {
    spec: "hide list %1",
    parts: ["hide", "list", "%m.list"],
    inputs: ["%m.list"],
    hash: "hide list _",
    shape: "stack",
    category: "list",
    selector: "hideList:",
  },
  {
    spec: "x position",
    parts: ["x", "position"],
    inputs: [],
    hash: "x position",
    shape: "reporter",
    category: "motion",
    selector: "xpos",
  },
  {
    spec: "y position",
    parts: ["y", "position"],
    inputs: [],
    hash: "y position",
    shape: "reporter",
    category: "motion",
    selector: "ypos",
  },
  {
    spec: "direction",
    parts: ["direction"],
    inputs: [],
    hash: "direction",
    shape: "reporter",
    category: "motion",
    selector: "heading",
  },
  {
    spec: "costume #",
    parts: ["costume", "#"],
    inputs: [],
    hash: "costume #",
    shape: "reporter",
    category: "looks",
    selector: "costumeIndex",
  },
  {
    spec: "costume %1",
    parts: ["costume", "%m"],
    inputs: ["%m"],
    hash: "costume _",
    shape: "reporter",
    category: "looks",
    selector: "LOOKS_COSTUMENUMBERNAME",
  },
  {
    spec: "size",
    parts: ["size"],
    inputs: [],
    hash: "size",
    shape: "reporter",
    category: "looks",
    selector: "scale",
  },
  {
    spec: "backdrop name",
    parts: ["backdrop", "name"],
    inputs: [],
    hash: "backdrop name",
    shape: "reporter",
    category: "looks",
    selector: "sceneName",
  },
  {
    spec: "backdrop %1",
    parts: ["backdrop", "%m"],
    inputs: ["%m"],
    hash: "backdrop _",
    shape: "reporter",
    category: "looks",
    selector: "sb3:LOOKS_BACKDROPNUMBERNAME",
  },
  {
    spec: "backdrop #",
    parts: ["backdrop", "#"],
    inputs: [],
    hash: "backdrop #",
    shape: "reporter",
    category: "looks",
    selector: "backgroundIndex",
  },
  {
    spec: "volume",
    parts: ["volume"],
    inputs: [],
    hash: "volume",
    shape: "reporter",
    category: "sound",
    selector: "volume",
  },
  {
    spec: "tempo",
    parts: ["tempo"],
    inputs: [],
    hash: "tempo",
    shape: "reporter",
    category: "music",
    selector: "tempo",
  },
  {
    spec: "touching %1?",
    parts: ["touching", "%m.touching", "?"],
    inputs: ["%m.touching"],
    hash: "touching _",
    shape: "boolean",
    category: "sensing",
    selector: "touching:",
  },
  {
    spec: "touching color %1?",
    parts: ["touching", "color", "%c", "?"],
    inputs: ["%c"],
    hash: "touching color _",
    shape: "boolean",
    category: "sensing",
    selector: "touchingColor:",
  },
  {
    spec: "color %1 is touching %2?",
    parts: ["color", "%c", "is", "touching", "%c", "?"],
    inputs: ["%c", "%c"],
    hash: "color _ is touching _",
    shape: "boolean",
    category: "sensing",
    selector: "color:sees:",
  },
  {
    spec: "distance to %1",
    parts: ["distance", "to", "%m.spriteOrMouse"],
    inputs: ["%m.spriteOrMouse"],
    hash: "distance to _",
    shape: "reporter",
    category: "sensing",
    selector: "distanceTo:",
  },
  {
    spec: "answer",
    parts: ["answer"],
    inputs: [],
    hash: "answer",
    shape: "reporter",
    category: "sensing",
    selector: "answer",
  },
  {
    spec: "key %1 pressed?",
    parts: ["key", "%m.key", "pressed?"],
    inputs: ["%m.key"],
    hash: "key _ pressed",
    shape: "boolean",
    category: "sensing",
    selector: "keyPressed:",
  },
  {
    spec: "mouse down?",
    parts: ["mouse", "down?"],
    inputs: [],
    hash: "mouse down",
    shape: "boolean",
    category: "sensing",
    selector: "mousePressed",
  },
  {
    spec: "mouse x",
    parts: ["mouse", "x"],
    inputs: [],
    hash: "mouse x",
    shape: "reporter",
    category: "sensing",
    selector: "mouseX",
  },
  {
    spec: "mouse y",
    parts: ["mouse", "y"],
    inputs: [],
    hash: "mouse y",
    shape: "reporter",
    category: "sensing",
    selector: "mouseY",
  },
  {
    spec: "set drag mode %1",
    parts: ["set", "drag", "mode", "%m"],
    inputs: ["%m"],
    hash: "set drag mode _",
    shape: "stack",
    category: "sensing",
    selector: "sb3:SENSING_SETDRAGMODE",
  },
  {
    spec: "loudness",
    parts: ["loudness"],
    inputs: [],
    hash: "loudness",
    shape: "reporter",
    category: "sensing",
    selector: "soundLevel",
  },
  {
    spec: "video %1 on %2",
    parts: ["video", "%m.videoMotionType", "on", "%m.stageOrThis"],
    inputs: ["%m.videoMotionType", "%m.stageOrThis"],
    hash: "video _ on _",
    shape: "reporter",
    category: "video",
    selector: "senseVideoMotion",
  },
  {
    spec: "timer",
    parts: ["timer"],
    inputs: [],
    hash: "timer",
    shape: "reporter",
    category: "sensing",
    selector: "timer",
  },
  {
    spec: "%1 of %2",
    parts: ["%m.attribute", "of", "%m.spriteOrStage"],
    inputs: ["%m.attribute", "%m.spriteOrStage"],
    hash: "_ of _",
    shape: "reporter",
    category: "sensing",
    selector: "getAttribute:of:",
  },
  {
    spec: "current %1",
    parts: ["current", "%m.timeAndDate"],
    inputs: ["%m.timeAndDate"],
    hash: "current _",
    shape: "reporter",
    category: "sensing",
    selector: "timeAndDate",
  },
  {
    spec: "days since 2000",
    parts: ["days", "since", "2000"],
    inputs: [],
    hash: "days since 2000",
    shape: "reporter",
    category: "sensing",
    selector: "timestamp",
  },
  {
    spec: "username",
    parts: ["username"],
    inputs: [],
    hash: "username",
    shape: "reporter",
    category: "sensing",
    selector: "getUserName",
  },
  {
    spec: "%1 + %2",
    parts: ["%n", "+", "%n"],
    inputs: ["%n", "%n"],
    hash: "_ + _",
    shape: "reporter",
    category: "operators",
    selector: "+",
  },
  {
    spec: "%1 - %2",
    parts: ["%n", "-", "%n"],
    inputs: ["%n", "%n"],
    hash: "_ - _",
    shape: "reporter",
    category: "operators",
    selector: "-",
  },
  {
    spec: "%1 * %2",
    parts: ["%n", "*", "%n"],
    inputs: ["%n", "%n"],
    hash: "_ * _",
    shape: "reporter",
    category: "operators",
    selector: "*",
  },
  {
    spec: "%1 / %2",
    parts: ["%n", "/", "%n"],
    inputs: ["%n", "%n"],
    hash: "_ / _",
    shape: "reporter",
    category: "operators",
    selector: "/",
  },
  {
    spec: "pick random %1 to %2",
    parts: ["pick", "random", "%n", "to", "%n"],
    inputs: ["%n", "%n"],
    hash: "pick random _ to _",
    shape: "reporter",
    category: "operators",
    selector: "randomFrom:to:",
  },
  {
    spec: "%1 < %2",
    parts: ["%s", "<", "%s"],
    inputs: ["%s", "%s"],
    hash: "_ < _",
    shape: "boolean",
    category: "operators",
    selector: "<",
  },
  {
    spec: "%1 = %2",
    parts: ["%s", "=", "%s"],
    inputs: ["%s", "%s"],
    hash: "_ = _",
    shape: "boolean",
    category: "operators",
    selector: "=",
  },
  {
    spec: "%1 > %2",
    parts: ["%s", ">", "%s"],
    inputs: ["%s", "%s"],
    hash: "_ > _",
    shape: "boolean",
    category: "operators",
    selector: ">",
  },
  {
    spec: "%1 and %2",
    parts: ["%b", "and", "%b"],
    inputs: ["%b", "%b"],
    hash: "_ and _",
    shape: "boolean",
    category: "operators",
    selector: "&",
  },
  {
    spec: "%1 or %2",
    parts: ["%b", "or", "%b"],
    inputs: ["%b", "%b"],
    hash: "_ or _",
    shape: "boolean",
    category: "operators",
    selector: "|",
  },
  {
    spec: "not %1",
    parts: ["not", "%b"],
    inputs: ["%b"],
    hash: "not _",
    shape: "boolean",
    category: "operators",
    selector: "not",
  },
  {
    spec: "join %1 %2",
    parts: ["join", "%s", "%s"],
    inputs: ["%s", "%s"],
    hash: "join _ _",
    shape: "reporter",
    category: "operators",
    selector: "concatenate:with:",
  },
  {
    spec: "letter %1 of %2",
    parts: ["letter", "%n", "of", "%s"],
    inputs: ["%n", "%s"],
    hash: "letter _ of _",
    shape: "reporter",
    category: "operators",
    selector: "letter:of:",
  },
  {
    spec: "length of %1",
    parts: ["length", "of", "%s"],
    inputs: ["%s"],
    hash: "length of _",
    shape: "reporter",
    category: "operators",
    selector: "stringLength:",
  },
  {
    spec: "%1 mod %2",
    parts: ["%n", "mod", "%n"],
    inputs: ["%n", "%n"],
    hash: "_ mod _",
    shape: "reporter",
    category: "operators",
    selector: "%",
  },
  {
    spec: "round %1",
    parts: ["round", "%n"],
    inputs: ["%n"],
    hash: "round _",
    shape: "reporter",
    category: "operators",
    selector: "rounded",
  },
  {
    spec: "%1 of %2",
    parts: ["%m.mathOp", "of", "%n"],
    inputs: ["%m.mathOp", "%n"],
    hash: "_ of _",
    shape: "reporter",
    category: "operators",
    selector: "computeFunction:of:",
  },
  {
    spec: "%1 contains %2?",
    parts: ["%s", "contains", "%s", "?"],
    inputs: ["%s", "%s"],
    hash: "_ contains _",
    shape: "boolean",
    category: "operators",
    selector: "sb3:operator_contains",
  },
  {
    spec: "item %1 of %2",
    parts: ["item", "%d.listItem", "of", "%m.list"],
    inputs: ["%d.listItem", "%m.list"],
    hash: "item _ of _",
    shape: "reporter",
    category: "list",
    selector: "getLine:ofList:",
  },
  {
    spec: "item # of %1 in %2",
    parts: ["item", "#", "of", "%s", "in", "%m.list"],
    inputs: ["%s", "%m.list"],
    hash: "item # of _ in _",
    shape: "reporter",
    category: "list",
    selector: "sb3:DATA_ITEMNUMOFLIST",
  },
  {
    spec: "length of %1",
    parts: ["length", "of", "%m.list"],
    inputs: ["%m.list"],
    hash: "length of _",
    shape: "reporter",
    category: "list",
    selector: "lineCountOfList:",
  },
  {
    spec: "%1 contains %2?",
    parts: ["%m.list", "contains", "%s", "?"],
    inputs: ["%m.list", "%s"],
    hash: "_ contains _",
    shape: "boolean",
    category: "list",
    selector: "list:contains:",
  },
  {
    spec: "when %1",
    parts: ["when", "%m.booleanSensor"],
    inputs: ["%m.booleanSensor"],
    hash: "when _",
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "when %1 %2 %3",
    parts: ["when", "%m.sensor", "%m.lessMore", "%n"],
    inputs: ["%m.sensor", "%m.lessMore", "%n"],
    hash: "when _ _ _",
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "sensor %1?",
    parts: ["sensor", "%m.booleanSensor", "?"],
    inputs: ["%m.booleanSensor"],
    hash: "sensor _",
    shape: "boolean",
    category: "extension",
    selector: "",
  },
  {
    spec: "%1 sensor value",
    parts: ["%m.sensor", "sensor", "value"],
    inputs: ["%m.sensor"],
    hash: "_ sensor value",
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on for %2 secs",
    parts: ["turn", "%m.motor", "on", "for", "%n", "secs"],
    inputs: ["%m.motor", "%n"],
    hash: "turn _ on for _ secs",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on",
    parts: ["turn", "%m.motor", "on"],
    inputs: ["%m.motor"],
    hash: "turn _ on",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 off",
    parts: ["turn", "%m.motor", "off"],
    inputs: ["%m.motor"],
    hash: "turn _ off",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set %1 power to %2",
    parts: ["set", "%m.motor", "power", "to", "%n"],
    inputs: ["%m.motor", "%n"],
    hash: "set _ power to _",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set %12 direction to %2",
    parts: ["set", "%m.motor2", "direction", "to", "%m.motorDirection"],
    inputs: ["%m.motor2", "%m.motorDirection"],
    hash: "set _ direction to _",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "when distance %1 %2",
    parts: ["when", "distance", "%m.lessMore", "%n"],
    inputs: ["%m.lessMore", "%n"],
    hash: "when distance _ _",
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "when tilt %1 %2",
    parts: ["when", "tilt", "%m.eNe", "%n"],
    inputs: ["%m.eNe", "%n"],
    hash: "when tilt _ _",
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "distance",
    parts: ["distance"],
    inputs: [],
    hash: "distance",
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "tilt",
    parts: ["tilt"],
    inputs: [],
    hash: "tilt",
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "turn %1 on for %2 seconds",
    parts: ["turn", "%m.motor", "on", "for", "%n", "seconds"],
    inputs: ["%m.motor", "%n"],
    hash: "turn _ on for _ seconds",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "set light color to %1",
    parts: ["set", "light", "color", "to", "%n"],
    inputs: ["%n"],
    hash: "set light color to _",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "play note %1 for %2 seconds",
    parts: ["play", "note", "%n", "for", "%n", "seconds"],
    inputs: ["%n", "%n"],
    hash: "play note _ for _ seconds",
    shape: "stack",
    category: "extension",
    selector: "",
  },
  {
    spec: "when tilted",
    parts: ["when", "tilted"],
    inputs: [],
    hash: "when tilted",
    shape: "hat",
    category: "extension",
    selector: "",
  },
  {
    spec: "tilt %1",
    parts: ["tilt", "%m.xxx"],
    inputs: ["%m.xxx"],
    hash: "tilt _",
    shape: "reporter",
    category: "extension",
    selector: "",
  },
  {
    spec: "else",
    parts: ["else"],
    inputs: [],
    hash: "else",
    shape: "celse",
    category: "control",
    selector: "",
  },
  {
    spec: "end",
    parts: ["end"],
    inputs: [],
    hash: "end",
    shape: "cend",
    category: "control",
    selector: "",
  },
  {
    spec: ". . .",
    parts: [".", ".", "."],
    inputs: [],
    hash: "...",
    shape: "stack",
    category: "grey",
    selector: "",
  },
  {
    spec: "%1 @addInput",
    parts: ["%n", "@addInput"],
    inputs: ["%n"],
    hash: "_ @addinput",
    shape: "ring",
    category: "grey",
    selector: "",
  },
  {
    spec: "user id",
    parts: ["user", "id"],
    inputs: [],
    hash: "user id",
    shape: "reporter",
    category: "obsolete",
    selector: "",
  },
  {
    spec: "if %1",
    parts: ["if", "%b"],
    inputs: ["%b"],
    hash: "if _",
    shape: "c-block",
    category: "obsolete",
    selector: "doIf",
  },
  {
    spec: "if %1",
    parts: ["if", "%b"],
    inputs: ["%b"],
    hash: "if _",
    shape: "if-block",
    category: "obsolete",
    selector: "doIfElse",
  },
  {
    spec: "forever if %1",
    parts: ["forever", "if", "%b"],
    inputs: ["%b"],
    hash: "forever if _",
    shape: "c-block cap",
    category: "obsolete",
    selector: "doForeverIf",
  },
  {
    spec: "stop script",
    parts: ["stop", "script"],
    inputs: [],
    hash: "stop script",
    shape: "cap",
    category: "obsolete",
    selector: "doReturn",
  },
  {
    spec: "stop all",
    parts: ["stop", "all"],
    inputs: [],
    hash: "stop all",
    shape: "cap",
    category: "obsolete",
    selector: "stopAll",
  },
  {
    spec: "switch to costume %1",
    parts: ["switch", "to", "costume", "%m.costume"],
    inputs: ["%m.costume"],
    hash: "switch to costume _",
    shape: "stack",
    category: "obsolete",
    selector: "lookLike:",
  },
  {
    spec: "next background",
    parts: ["next", "background"],
    inputs: [],
    hash: "next background",
    shape: "stack",
    category: "obsolete",
    selector: "nextScene",
  },
  {
    spec: "switch to background %1",
    parts: ["switch", "to", "background", "%m.backdrop"],
    inputs: ["%m.backdrop"],
    hash: "switch to background _",
    shape: "stack",
    category: "obsolete",
    selector: "startScene",
  },
  {
    spec: "background #",
    parts: ["background", "#"],
    inputs: [],
    hash: "background #",
    shape: "reporter",
    category: "obsolete",
    selector: "backgroundIndex",
  },
  {
    spec: "loud?",
    parts: ["loud?"],
    inputs: [],
    hash: "loud",
    shape: "boolean",
    category: "obsolete",
    selector: "isLoud",
  },
]
